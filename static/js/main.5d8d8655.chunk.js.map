{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","REGEX","NewMovie","state","movieNameValue","showNameError","movieDescriptionValue","imageUrl","showImageUrlError","showImageValidateUrlError","showImdbUrlError","showImdbValidateUrlError","showImdbIdError","validateUrl","string","test","formActionHandler","event","actionType","preventDefault","target","value","setState","Error","formSubmit","preparedObject","props","addMovie","onSubmit","this","type","maxLength","placeholder","onChange","onBlur","classNames","visibleError","rows","BlockButton","React","Component","App","moviesFromServer","movieObj","ReactDOM","render","document","getElementById"],"mappings":"syEAKaA,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MAAOC,EADiC,EACjCA,YAAaC,EADoB,EACpBA,OAAQC,EADY,EACZA,QADY,OAGxC,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKH,EACLI,IAAI,kBAIV,sBAAKF,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJC,IAAI,aAIV,qBAAKF,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BJ,SAI/B,sBAAKI,UAAU,UAAf,UACGH,EACD,uBACA,mBAAGM,KAAMJ,EAAT,4BC1BKK,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKL,UAAU,SAAf,SACGK,EAAOC,KAAI,SAAAC,GAAK,OACf,cAAC,EAAD,eAAkCA,GAAlBA,EAAMC,c,+BCRtBC,EAAQ,qKAoBDC,EAAb,4MACEC,MAAe,CACbC,eAAgB,GAChBC,eAAe,EACfC,sBAAuB,GACvBC,SAAU,GACVC,mBAAmB,EACnBC,2BAA2B,EAC3BlB,QAAS,GACTmB,kBAAkB,EAClBC,0BAA0B,EAC1BX,OAAQ,GACRY,iBAAiB,GAZrB,EAeEC,YAAc,SAACC,GACb,OAAOb,EAAMc,KAAKD,IAhBtB,EAmBEE,kBAAoB,SAClBC,EACAC,GAIA,OAFAD,EAAME,iBAEED,GACN,IAAM,iBAC4B,IAAD,EAKxB,EALP,GAA2B,KAAvBD,EAAMG,OAAOC,MACf,EAAKC,UAAL,mBACGJ,EAAa,IADhB,+BAEiB,GAFjB,SAKA,EAAKI,UAAL,mBACGJ,EAAaD,EAAMG,OAAOC,OAD7B,+BAEiB,GAFjB,IAMF,MACF,IAAM,wBACJ,EAAKC,SAAL,eACGJ,EAAaD,EAAMG,OAAOC,QAG7B,MACF,IAAM,WAC4B,IAAD,EAMxB,EANP,GAA2B,KAAvBJ,EAAMG,OAAOC,MACf,EAAKC,UAAL,mBACGJ,EAAa,IADhB,mCAEqB,GAFrB,2CAG6B,GAH7B,SAMA,EAAKI,UAAL,mBACGJ,EAAaD,EAAMG,OAAOC,OAD7B,mCAEqB,GAFrB,IAIK,EAAKR,YAAYI,EAAMG,OAAOC,OAKjC,EAAKC,SAAS,CACZb,2BAA2B,IAL7B,EAAKa,SAAS,CACZb,2BAA2B,IASjC,MACF,IAAM,UAC4B,IAAD,EAKxB,EALP,GAA2B,KAAvBQ,EAAMG,OAAOC,MACf,EAAKC,UAAL,mBACGJ,EAAa,IADhB,kCAEoB,GAFpB,SAKA,EAAKI,UAAL,mBACGJ,EAAaD,EAAMG,OAAOC,OAD7B,kCAEoB,GAFpB,IAIK,EAAKR,YAAYI,EAAMG,OAAOC,OAKjC,EAAKC,SAAS,CACZX,0BAA0B,IAL5B,EAAKW,SAAS,CACZX,0BAA0B,IAShC,MACF,IAAM,SAC4B,IAAD,EAKxB,EALP,GAA2B,KAAvBM,EAAMG,OAAOC,MACf,EAAKC,UAAL,mBACGJ,EAAa,IADhB,iCAEmB,GAFnB,SAKA,EAAKI,UAAL,mBACGJ,EAAaD,EAAMG,OAAOC,OAD7B,iCAEmB,GAFnB,IAMF,MACF,QACE,MAAM,IAAIE,MAAM,8BA5GxB,EAgHEC,WAAa,SAACP,GAqBZ,GApBAA,EAAME,iBAE4B,KAA9B,EAAKhB,MAAMC,gBACb,EAAKkB,SAAS,CACZjB,eAAe,IAIS,KAAxB,EAAKF,MAAMI,UACb,EAAKe,SAAS,CACZd,mBAAmB,IAII,KAAvB,EAAKL,MAAMZ,SACb,EAAK+B,SAAS,CACZZ,kBAAkB,IAII,KAAtB,EAAKP,MAAMH,OACb,EAAKsB,SAAS,CACZV,iBAAiB,SAEd,IAAK,EAAKT,MAAMQ,2BAA6B,EAAKR,MAAMM,0BAA2B,CACxF,IAAMgB,EAAiB,CACrBrC,MAAO,EAAKe,MAAMC,eAClBf,YAAa,EAAKc,MAAMG,sBACxBhB,OAAQ,EAAKa,MAAMI,SACnBhB,QAAS,EAAKY,MAAMZ,QACpBS,OAAQ,EAAKG,MAAMH,QAGrB,EAAK0B,MAAMC,SAASF,GACpB,EAAKH,SAAS,CACZlB,eAAgB,GAChBE,sBAAuB,GACvBC,SAAU,GACVhB,QAAS,GACTS,OAAQ,OAxJhB,4CA6JE,WAAU,IAAD,OACP,OACE,uBAAM4B,SAAUC,KAAKL,WAArB,UACE,uBACEM,KAAK,OACLC,UAAW,IACXC,YAAY,oCACZX,MAAOQ,KAAK1B,MAAMC,eAClB6B,SAAU,SAAAhB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,mBACjDzB,UAAU,6BACV0C,OAAQ,SAAAjB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,qBAEjD,mBAAGzB,UAAW2C,IAAW,aAAc,CACrCC,aAAcP,KAAK1B,MAAME,gBAD3B,oCAMA,0BACEgB,MAAOQ,KAAK1B,MAAMG,sBAClBd,UAAU,gCACVwC,YAAY,0BACZK,KAAM,GACNJ,SAAU,SAAAhB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,4BAEnD,uBACEa,KAAK,OACLE,YAAY,uCACZX,MAAOQ,KAAK1B,MAAMI,SAClB0B,SAAU,SAAAhB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,aACjDzB,UAAU,6BACV0C,OAAQ,SAAAjB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,eAEjD,mBAAGzB,UAAW2C,IAAW,aAAc,CACrCC,aAAcP,KAAK1B,MAAMK,mBAAqBqB,KAAK1B,MAAMM,4BAD3D,SAIGoB,KAAK1B,MAAMM,0BAA4B,qBAAuB,2BAEjE,uBACEqB,KAAK,OACLE,YAAY,sCACZX,MAAOQ,KAAK1B,MAAMZ,QAClB0C,SAAU,SAAAhB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,YACjDzB,UAAU,6BACV0C,OAAQ,SAAAjB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,cAEjD,mBAAGzB,UAAW2C,IAAW,aAAc,CACrCC,aAAcP,KAAK1B,MAAMO,kBAAoBmB,KAAK1B,MAAMQ,2BAD1D,SAIGkB,KAAK1B,MAAMQ,yBAA2B,qBAAuB,2BAEhE,uBACEmB,KAAK,OACLE,YAAY,qCACZX,MAAOQ,KAAK1B,MAAMH,OAClBiC,SAAU,SAAAhB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,WACjDzB,UAAU,6BACV0C,OAAQ,SAAAjB,GAAK,OAAI,EAAKD,kBAAkBC,EAAO,aAEjD,mBAAGzB,UAAW2C,IAAW,aAAc,CACrCC,aAAcP,KAAK1B,MAAMS,kBAD3B,oCAMA,wBACEkB,KAAK,SACLtC,UACE2C,IACE,eACA,CACEG,YAAmC,KAAtBT,KAAK1B,MAAMH,QACE,KAAvB6B,KAAK1B,MAAMZ,SACe,KAAxBsC,KAAK1B,MAAMI,UACmB,KAA9BsB,KAAK1B,MAAMC,gBACXyB,KAAK1B,MAAMM,2BACXoB,KAAK1B,MAAMQ,2BAXxB,kCAhOR,GAA8B4B,IAAMC,W,QCdvBC,EAAb,4MACEtC,MAAe,CACbN,OAAQ6C,GAFZ,EAKEf,SAAW,SAACgB,GACV,EAAKrB,UACH,SAAAnB,GAAK,MAAK,CACRN,OAAO,GAAD,mBAAMM,EAAMN,QAAZ,CAAoB8C,SARlC,4CAaE,WACE,IAAQ9C,EAAWgC,KAAK1B,MAAhBN,OAER,OACE,sBAAKL,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYK,OAAQA,MAEtB,sBAAKL,UAAU,UAAf,UACE,oBAAIA,UAAU,cAAd,8CACA,cAAC,EAAD,CAAUmC,SAAUE,KAAKF,qBAvBnC,GAAyBY,IAAMC,WCN/BI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5d8d8655.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './NewMovie.scss';\nimport classNames from 'classnames';\n\nconst REGEX = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\ntype Props = {\n  addMovie:(preparedObject:Movie) => void;\n};\n\ntype State = {\n  movieNameValue:string;\n  showNameError:boolean;\n  movieDescriptionValue:string;\n  imageUrl:string;\n  showImageUrlError:boolean;\n  showImageValidateUrlError:boolean;\n  imdbUrl:string;\n  showImdbUrlError:boolean;\n  showImdbValidateUrlError:boolean,\n  imdbId:string;\n  showImdbIdError:boolean;\n};\n\nexport class NewMovie extends React.Component<Props, State> {\n  state: State = {\n    movieNameValue: '',\n    showNameError: false,\n    movieDescriptionValue: '',\n    imageUrl: '',\n    showImageUrlError: false,\n    showImageValidateUrlError: false,\n    imdbUrl: '',\n    showImdbUrlError: false,\n    showImdbValidateUrlError: false,\n    imdbId: '',\n    showImdbIdError: false,\n  };\n\n  validateUrl = (string: string) => {\n    return REGEX.test(string);\n  };\n\n  formActionHandler = (\n    event:React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>,\n    actionType:string,\n  ) => {\n    event.preventDefault();\n\n    switch (actionType) {\n      case ('movieNameValue'):\n        if (event.target.value === '') {\n          this.setState({\n            [actionType]: '',\n            showNameError: true,\n          });\n        } else {\n          this.setState({\n            [actionType]: event.target.value,\n            showNameError: false,\n          });\n        }\n\n        break;\n      case ('movieDescriptionValue'):\n        this.setState({\n          [actionType]: event.target.value,\n        });\n\n        break;\n      case ('imageUrl'):\n        if (event.target.value === '') {\n          this.setState({\n            [actionType]: '',\n            showImageUrlError: true,\n            showImageValidateUrlError: false,\n          });\n        } else {\n          this.setState({\n            [actionType]: event.target.value,\n            showImageUrlError: false,\n          });\n          if (!this.validateUrl(event.target.value)) {\n            this.setState({\n              showImageValidateUrlError: true,\n            });\n          } else {\n            this.setState({\n              showImageValidateUrlError: false,\n            });\n          }\n        }\n\n        break;\n      case ('imdbUrl'):\n        if (event.target.value === '') {\n          this.setState({\n            [actionType]: '',\n            showImdbUrlError: true,\n          });\n        } else {\n          this.setState({\n            [actionType]: event.target.value,\n            showImdbUrlError: false,\n          });\n          if (!this.validateUrl(event.target.value)) {\n            this.setState({\n              showImdbValidateUrlError: true,\n            });\n          } else {\n            this.setState({\n              showImdbValidateUrlError: false,\n            });\n          }\n        }\n\n        break;\n      case ('imdbId'):\n        if (event.target.value === '') {\n          this.setState({\n            [actionType]: '',\n            showImdbIdError: true,\n          });\n        } else {\n          this.setState({\n            [actionType]: event.target.value,\n            showImdbIdError: false,\n          });\n        }\n\n        break;\n      default:\n        throw new Error('Wrong type of form event');\n    }\n  };\n\n  formSubmit = (event:React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (this.state.movieNameValue === '') {\n      this.setState({\n        showNameError: true,\n      });\n    }\n\n    if (this.state.imageUrl === '') {\n      this.setState({\n        showImageUrlError: true,\n      });\n    }\n\n    if (this.state.imdbUrl === '') {\n      this.setState({\n        showImdbUrlError: true,\n      });\n    }\n\n    if (this.state.imdbId === '') {\n      this.setState({\n        showImdbIdError: true,\n      });\n    } else if (!this.state.showImdbValidateUrlError && !this.state.showImageValidateUrlError) {\n      const preparedObject = {\n        title: this.state.movieNameValue,\n        description: this.state.movieDescriptionValue,\n        imgUrl: this.state.imageUrl,\n        imdbUrl: this.state.imdbUrl,\n        imdbId: this.state.imdbId,\n      };\n\n      this.props.addMovie(preparedObject);\n      this.setState({\n        movieNameValue: '',\n        movieDescriptionValue: '',\n        imageUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.formSubmit}>\n        <input\n          type=\"text\"\n          maxLength={100}\n          placeholder=\"Enter movie tittle *(is required)\"\n          value={this.state.movieNameValue}\n          onChange={event => this.formActionHandler(event, 'movieNameValue')}\n          className=\"formField movieTittleInput\"\n          onBlur={event => this.formActionHandler(event, 'movieNameValue')}\n        />\n        <p className={classNames('FieldError', {\n          visibleError: this.state.showNameError,\n        })}\n        >\n          Please fill this field\n        </p>\n        <textarea\n          value={this.state.movieDescriptionValue}\n          className=\"formField movieTittleTextarea\"\n          placeholder=\"Enter movie description\"\n          rows={10}\n          onChange={event => this.formActionHandler(event, 'movieDescriptionValue')}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Enter movie image url *(is required)\"\n          value={this.state.imageUrl}\n          onChange={event => this.formActionHandler(event, 'imageUrl')}\n          className=\"formField movieTittleInput\"\n          onBlur={event => this.formActionHandler(event, 'imageUrl')}\n        />\n        <p className={classNames('FieldError', {\n          visibleError: this.state.showImageUrlError || this.state.showImageValidateUrlError,\n        })}\n        >\n          {this.state.showImageValidateUrlError ? 'Invalid url format' : 'Please fill this field'}\n        </p>\n        <input\n          type=\"text\"\n          placeholder=\"Enter movie imdb url *(is required)\"\n          value={this.state.imdbUrl}\n          onChange={event => this.formActionHandler(event, 'imdbUrl')}\n          className=\"formField movieTittleInput\"\n          onBlur={event => this.formActionHandler(event, 'imdbUrl')}\n        />\n        <p className={classNames('FieldError', {\n          visibleError: this.state.showImdbUrlError || this.state.showImdbValidateUrlError,\n        })}\n        >\n          {this.state.showImdbValidateUrlError ? 'Invalid url format' : 'Please fill this field'}\n        </p>\n        <input\n          type=\"text\"\n          placeholder=\"Enter movie imdb id *(is required)\"\n          value={this.state.imdbId}\n          onChange={event => this.formActionHandler(event, 'imdbId')}\n          className=\"formField movieTittleInput\"\n          onBlur={event => this.formActionHandler(event, 'imdbId')}\n        />\n        <p className={classNames('FieldError', {\n          visibleError: this.state.showImdbIdError,\n        })}\n        >\n          Please fill this field\n        </p>\n        <button\n          type=\"submit\"\n          className={\n            classNames(\n              'submitButton',\n              {\n                BlockButton: this.state.imdbId === ''\n                || this.state.imdbUrl === ''\n                  || this.state.imageUrl === ''\n                  || this.state.movieNameValue === ''\n                  || this.state.showImageValidateUrlError\n                  || this.state.showImdbValidateUrlError,\n              },\n            )\n          }\n        >\n          Add new Movie\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movieObj:Movie) => {\n    this.setState(\n      state => ({\n        movies: [...state.movies, movieObj],\n      }),\n    );\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <h3 className=\"page-tittle\">To add a new movie fill the form</h3>\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}